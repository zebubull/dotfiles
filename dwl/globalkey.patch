From 65e2466212beb3040241e3b6ca8e730e6b96fd66 Mon Sep 17 00:00:00 2001
From: korei999 <ju7t1xe@gmail.com>
Date: Thu, 21 Nov 2024 02:24:32 +0200
Subject: [PATCH] implement globalkey patch

---
 config.def.h |  8 ++++++++
 dwl.c        | 58 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 66 insertions(+)

diff --git a/config.def.h b/config.def.h
index 22d2171..2bf1c68 100644
--- a/config.def.h
+++ b/config.def.h
@@ -122,6 +122,14 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 static const char *termcmd[] = { "foot", NULL };
 static const char *menucmd[] = { "wmenu-run", NULL };
 
+#define ADDPASSRULE(S, M, K) {.appid = S, .len = LENGTH(S), .key = K}
+static const PassKeypressRule pass_rules[] = {
+	ADDPASSRULE("com.obsproject.Studio", MODKEY, XKB_KEY_Home),
+	ADDPASSRULE("com.obsproject.Studio", MODKEY, XKB_KEY_End),
+	ADDPASSRULE("com.obsproject.Studio", MODKEY, XKB_KEY_F12),
+	ADDPASSRULE("discord", 0, XKB_KEY_n),
+};
+
 static const Key keys[] = {
 	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
 	/* modifier                  key                 function        argument */
diff --git a/dwl.c b/dwl.c
index 9acb898..a0d632a 100644
--- a/dwl.c
+++ b/dwl.c
@@ -221,6 +221,13 @@ typedef struct {
 	int x, y;
 } MonitorRule;
 
+typedef struct {
+	const char* appid;
+	size_t len;
+	uint32_t mod;
+	uint32_t key;
+} PassKeypressRule;
+
 typedef struct {
 	struct wlr_pointer_constraint_v1 *constraint;
 	struct wl_listener destroy;
@@ -297,6 +304,7 @@ static void incnmaster(const Arg *arg);
 static void inputdevice(struct wl_listener *listener, void *data);
 static int keybinding(uint32_t mods, xkb_keysym_t sym);
 static void keypress(struct wl_listener *listener, void *data);
+static void keypressglobal(struct wlr_surface *last_surface, struct wlr_keyboard *keyboard, struct wlr_keyboard_key_event *event, uint32_t mods, xkb_keysym_t keysym);
 static void keypressmod(struct wl_listener *listener, void *data);
 static int keyrepeat(void *data);
 static void killclient(const Arg *arg);
@@ -1575,6 +1583,12 @@ keypress(struct wl_listener *listener, void *data)
 	/* This event is raised when a key is pressed or released. */
 	KeyboardGroup *group = wl_container_of(listener, group, key);
 	struct wlr_keyboard_key_event *event = data;
+	struct wlr_surface *last_surface = seat->keyboard_state.focused_surface;
+	struct wlr_xdg_surface *xdg_surface = last_surface ? wlr_xdg_surface_try_from_wlr_surface(last_surface) : NULL;
+	int pass = 0;
+#ifdef XWAYLAND
+	struct wlr_xwayland_surface *xsurface = last_surface ? wlr_xwayland_surface_try_from_wlr_surface(last_surface) : NULL;
+#endif
 
 	/* Translate libinput keycode -> xkbcommon */
 	uint32_t keycode = event->keycode + 8;
@@ -1609,12 +1623,56 @@ keypress(struct wl_listener *listener, void *data)
 	if (handled)
 		return;
 
+	/* don't pass when popup is focused
+	 * this is better than having popups (like fuzzel or wmenu) closing while typing in a passed keybind */
+	pass = (xdg_surface && xdg_surface->role != WLR_XDG_SURFACE_ROLE_POPUP) || !last_surface
+#ifdef XWAYLAND
+		|| xsurface
+#endif
+		;
+	/* passed keys don't get repeated */
+	if (pass && syms)
+		keypressglobal(last_surface, &group->wlr_group->keyboard, event, mods, syms[0]);
+
 	wlr_seat_set_keyboard(seat, &group->wlr_group->keyboard);
 	/* Pass unhandled keycodes along to the client. */
 	wlr_seat_keyboard_notify_key(seat, event->time_msec,
 			event->keycode, event->state);
 }
 
+void
+keypressglobal(struct wlr_surface *last_surface, struct wlr_keyboard *keyboard, struct wlr_keyboard_key_event *event, uint32_t mods, xkb_keysym_t keysym)
+{
+	Client *c = NULL, *lastc = focustop(selmon);
+	uint32_t keycodes[32] = {0};
+	int reset = false;
+	const char *appid = NULL;
+
+	for (size_t r = 0; r < LENGTH(pass_rules); r++) {
+		uint32_t rcode = xkb_keysym_to_upper(pass_rules[r].key);
+		uint32_t pcode = xkb_keysym_to_upper(keysym);
+		/* match key only (case insensitive) ignoring mods */
+		if (rcode == pcode) {
+			wl_list_for_each(c, &clients, link) {
+				if (c && c != lastc) {
+					appid = client_get_appid(c);
+					if (appid && strncmp(appid, pass_rules[r].appid, pass_rules[r].len) == 0) {
+						reset = true;
+						wlr_seat_keyboard_enter(seat, client_surface(c), keycodes, 0, &keyboard->modifiers);
+						wlr_seat_keyboard_send_key(seat, event->time_msec, event->keycode, event->state);
+
+						goto done;
+					}
+				}
+			}
+		}
+	}
+
+done:
+	if (reset)
+		wlr_seat_keyboard_enter(seat, last_surface, keycodes, 0, &keyboard->modifiers);
+}
+
 void
 keypressmod(struct wl_listener *listener, void *data)
 {
-- 
2.47.0


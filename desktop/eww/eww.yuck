(deflisten workspaces :initial "[]" "/usr/bin/bash $HOME/.config/eww/workspaces.sh")
(deflisten current :initial 1 "/usr/bin/bash /home/zebu/.config/eww/active.sh")

(defvar initials "LK")
(defpoll name :interval "15m" "whoami")
(defpoll kernel :interval "15m" "uname -r")

(defpoll song :interval "1s" `./music_info --song`)
(defpoll artist :interval "1s" `./music_info --artist`)
(defpoll status :interval "1s" `./music_info --status`)
(defpoll musictime :interval "1s" `./music_info --time`)
(defpoll cover :interval "1s" `./music_info --cover`)
(defpoll ctime :interval "1s" `./music_info --ctime`)
(defpoll ttime :interval "1s" `./music_info --ttime`)

(defpoll shuffle :interval "1s" `mpc status | grep --color=never "random" | awk '{ print $6}'`)
(defpoll repeat :interval "1s" `mpc status | grep --color=never "repeat" | awk '{ print $4}'`)
(defpoll single :interval "1s" `mpc status | grep --color=never "repeat" | awk '{ print $8}'`)
(defpoll song_progress :interval "1s" `mpc | grep --color=never "playing" | awk '{print $3}'`)

(defpoll sys_vol :interval "1s" `wpctl get-volume @DEFAULT_SINK@ | awk '{print $2*100}'`)
(defpoll bness :interval "1s" `./brightness.sh`)

(defwidget sep [] (label :class "sep" :text "󰇙"))

(defwidget arch [] (label :class "arch-logo" :text "󰣇"))

(defwidget workspaces [] 
  (box :space-evenly false :class "ws-box"
    (for ws in workspaces
      (button :class "ws ${ws.id == current ? "current" : ""}" :onclick "hyprctl dispatch workspace ${ws.id}" "${ws.id == current ? "" : ""}"))))

(defwidget left [] (box :class "left" :halign "start" :space-evenly false (arch) (workspaces)))

(defwidget time [] (box :class "time" :space-evenly false 
                     (label :class "hour" :text "${formattime(EWW_TIME, "%l")}")
                     (label :class "sep" :text ":")
                     (label :class "min" :text "${formattime(EWW_TIME, "%M")}")
                     ))

(defwidget center [] (box :class "center" :halign "center"))

(defwidget right [] (box :class "right" :halign "end" (time)))

(defwindow bar
  :monitor 0 
  :geometry (geometry :x "0px" :y "4px" :height "36px" :width "99%" :anchor "top center")
  :exclusive true
  :focusable false
  :stacking "fg"
  (centerbox :class "window" (left) (center) (right)))

(defwidget name []
  (box :orientation "h" :space-evenly true :class "name-box"
    (label :class "initials" :text initials)
    (box :orientation "v" :space-evenly true
      (label :class "name" :text name)
      (label :class "kernel" :text kernel)
      )))

(defwidget volum []
	(eventbox :onhover "${EWW_CMD} update volum=true" 		
			  :onhoverlost "${EWW_CMD} update volum=false"
	(box      :orientation "h" 	  
			  :space-evenly "false" 
              :valign "center"
			  :spacing "2"
	(button :class "volume-icon" "")
	(scale    :class "volbar" 	  
			  :value current-volume 
			  :orientation "h"      
			  :flipped false 
			  :max 105 
			  :min 0 
			  :onchange "mpc volume {}" ))))
(defpoll current-volume :interval "1s" `mpc volume | gawk '{print $1}' FPAT='[0-9]+'`)
(defvar volum false)

(defwidget music [] 
	(box :class "music" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover}');")
		(box :orientation "v" :spacing 12 :space-evenly "false" :vexpand "false" :hexpand "true" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 90 :text song)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 70 :text artist)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "true" 
				(button :class "prev" :onclick "./music_info --prev" "󰼨")
				(button :class "play" :onclick "./music_info --toggle" status)
				(button :class "next" :onclick "./music_info --next" "󰼧"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :min 0 :active "true" :max 100 :value musictime :onchange `mpc seek {}%`))
            (label :halign "center" :class "song_progress" :text song_progress )
            (box :orientation "h" :halign "center" :space-evenly true :vexpand "false" :hexpand "false" 
              (volum)
              (button :class "shuffle ${shuffle}" :onclick `mpc random` "${shuffle == "on" ? "󰒟" : "󰒞"}")
              (button :class "repeat ${repeat}" :onclick `mpc repeat` "${repeat == "on" ? "󰑖" : "󰑗"}")
              (button :class "single ${single}" :onclick `mpc single` "󰑘"))
        )))

(defwidget cpubar []
  (box :class "perf" :orientation "v" :space-evenly false :tooltip "${round(EWW_CPU["avg"],1)}%"
    (scale :flipped true :class "cpubar" :min -10 :max 100 :active false :orientation "v" :value {EWW_CPU["avg"]})
    (label :class "perf-label cpu" :text "")
    ))

(defwidget batbar []
  (box :class "perf" :orientation "v" :space-evenly false :tooltip "${round(EWW_BATTERY["total_avg"],1)}%"
    (scale :flipped true :class "batbar" :min -10 :max 100 :active false :orientation "v" :value {EWW_BATTERY["total_avg"]})
    (label :class "perf-label bat" :text "")
    ))

(defwidget volbar []
  (box :class "perf" :orientation "v" :space-evenly false :tooltip "${sys_vol}%"
    (scale :flipped true :class "sys_volbar" 
           :min 0 :max 100 
           :active true :orientation "v" 
           :value {sys_vol} :onchange "wpctl set-volume @DEFAULT_SINK@ {}%")
    (label :class "perf-label vol" :text "")
    ))

(defwidget bbar []
  (box :class "perf" :orientation "v" :space-evenly false :tooltip "${bness}%"
    (scale :flipped true :class "bbar" 
           :min 0 :max 100 
           :active true :orientation "v" 
           :value {bness} :onchange "brightnessctl s {}%")
    (label :class "perf-label bness" :text "󰃠")
  ))

(defwidget membar []
  (box :class "perf" :orientation "v" :space-evenly false 
    (scale :flipped true :class "membar" 
           :min 0 :max 100 
           :active false :orientation "v" 
           :tooltip "${round(EWW_RAM["used_mem"] / 1024 / 1024, 0)} MiB"
           :value {EWW_RAM["used_mem_perc"]})
    (label :class "perf-label mem" :text "")
  ))

(defwidget perfs [] 
  (box :class "perfs" :orientation "h" :space-evenly true :spacing 60
  (cpubar)
  (membar)
  ;; (batbar)
  (volbar)
  (bbar)))

(defwidget power []
  (box :class "power" :orientation "h" :space-evenly true
    (button :class "pwrbtn" :onclick "systemctl poweroff" "")
    (button :class "pwrbtn" :onclick "systemctl reboot" "")
    ;; (button :class "pwrbtn" :onclick "systemctl suspend" "󰒲")
    ))
 
(defwindow dash
  :monitor 0
  :geometry (geometry :x "8px" :y "0px" :height "40%" :width "25%" :anchor "center")
  :focusable false
  :exclusive false
  :stacking "fg"
  (box :class "dash" :orientation "v" 
    :space-evenly false
    ;; (name)
    (music)
    (perfs)
    (power)
    ))
